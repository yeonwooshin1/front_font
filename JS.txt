[ 자바스크립트 ]
    HTML : 하이퍼 텍스트 마크업 언어    : 웹문서 뼈대       
    CSS : 캐스케이드 스타일 시트 언어   : 웹문서 디자인 
    JS : 자바 스크립트                 : 웹문서 동적    * 프로그래밍 언어
        - HTML 안에 CSS 와 JS 가 포함
    1. 사용처 : 웹프로그래밍 , 서버개발 , 소프트웨어개발
    2. 라이브러리 종류
        1. REACT , ANGULAR , VUE , JQUERY : 프론트엔드
        2. NODE.JS : 2009년 이후 백엔드 역할 
        3. REACT NATIVE : 앱(지원중단)
        4. REACT NATIVE WEB : 웹+앱
        5. NW.JS : 소프트웨어
    3. 사용법 
        - 주의할점 : HTML 없이 JS 파일만으로 실행이 불가능하다.
        (방법1) :
            1. HTML 파일내 <body> 마크업 안에서 가장 아래
            2. <script> 마크업을 이용하여 JS코드를 작성한다. 
        *(방법2)*
            1. JS 파일 생성하여 JS코드를 작성한다.
            2. HTML 파일내 <body> 마크업 안에서 가장 아래
            3. <script src="JS파일경로"></script>
    4. 주석 
        - HTML : <!-- 주석내용 -->
        - CSS : /* 주석내용 */
        - JS :  
            1. /* 여러줄주석내용 */
            2. // 한줄주석내용 

[ JS 실행 확인 ]
    - 브라우저(크롬) 에서 F12(개발자도구)
        -> sources 탭에서 .js 파일 여부 확인 
        -> console 탭에서 .js 출력 메시지 확인 

[ 기본 필수 용어 ]
    1.데이터 ( Data / 자료 ) : 사실이나 값을 그대로 나타낸 객관적인 자료 
        -> (사람)나이,키,시력,이름 등등 / (제품)가격,제품명 등등
    
    2.리터럴 : 프로그래밍언어(JS/JAVA/PY/C) 에서 소스코드(작성한코드) 에 직접 표현한 값 
        -> 왜? 컴퓨터는 0과1(2진수) 밖에 모른다?? 각 프로그래밍언어 회사들은 0과1 로 조합한 미리 만들어진 단어 필요하다.
        -> 개발자가 사용할수 있도록 미리 정해진 값들을 넣어났다. ( 상수 = 수정할수 없는 고정값 )
        -> 프로그래밍 언어 회사에서 종류 정한다. < 자료의타입/종류(자료형) >

    3.자료형 : 프로그래밍언어서 자료들을 분류하는 방법
        -> 왜? 데이터를 처리하는데 효율적으로 하기 위해서 : <분리수거>
        -> 각 프로그래밍언어들 별로 다르다.

[ JS 자료형 ]
    1. 숫자형( Number )             : 10(정수) , 3.14(실수)
    2. 문자열( String )             : " " 큰따옴표 또는 '' 작은따옴표 감싼 자료 , 사과 vs "사과" / console  vs "console"
    3. 불리언( Boolean )            : true 또는 false *대문자 주의
    4. 배열( Array )                : [ 자료, 자료, 자료 ] 대괄호 안에 ,쉼표 구분하여 여러 자료들을 감싼 *자료*
    5. 객체( Object )               : { 속성명 : 자료 , 속성명 : 자료 } 중괄호 안에 ,쉼표 구분하여 이름과값이 한쌍을 이루는 자료
    6. 특수 : 
        undefined : 자료가 할당되지 않은 상태
        null : 자료가 존재하지 않음

* 생각해보기1 
    [ 10 , 'A' , "사과" , 3.14 ]
    1. 위 코드에서 자료는 몇개? 5개( 10 , 'A' , "사과" , 3.14 , [] )
* 생각해보기2 
    [ { 이름 : "김현수" } , 'A' , 3.14 ]
    1. 위 코드에서 자료는 몇개? 5개( "김현수" , { } , 'A' , 3.14 , [ ] )
    
** 미리 정해진 기능이 포함된 특수문자/문자열 : 키워드
    [] , {} , console , Number , String , if , for 등등 

[ 변수 와 상수 ] : 하나의 자료를 저장하는 메모리 공간 
    1. 변수 * 수정가능
        let 변수명 = 자료;
    2. 상수 * 수정불가능
        const 변수명 = 자료;
        
[ 출력함수 ]
    1. console.log( 출력할자료 또는 변수명 )        : 브라우저의 개발자도구 console탭 출력
    2. alert( 출력할자료 또는 변수명 )              : 브라우저의 알림 창 출력

[ 입력함수 ]
    1. confirm( "메시지" )                         : [확인][취소] 알림 창 , true 또는 false 반환
        let 변수명 = confirm();
    2. prompt( "메시지" )                          : 텍스트 입력 창 , 입력받은 텍스트 반환 
        let 변수명 = prompt();

[ 문자열 : 템플릿 리터럴 ] : 문자열과 변수 또는 식 연결하는 방법

 방법1) "문자열" + 변수명 + "문자열"
 *방법2* ) `문자열 ${ 변수명 } 문자열`

[ 문자열 : 이스케이프 문자 ] : \백슬래시 이용한 특수 기호 
    \\ : 백슬래시 출력 
    \' : 작은따옴표 출력 
    \" : 큰따롬표 출력 
    \n : 줄바꿈 처리 
    \t : 탭(들여쓰기) 처리 



[ 배열 ]
    1. 여러 자료들을 순서대로 저장하는 *자료*
    2. 인덱스 : 배열 내 자료들이 저장도니 순서번호 "0번부터 시작한다"
    3. 사용법 
    (1) 선언 : let/const 변수명 = [ 자료, 자료, 자료 ]
    (2) 호출 : 변수명 or 변수명[ 인덱스 ]
    (3) 수정 : 변수명 = [ 새로운 배열 ] or 변수명[인덱스] = 새로운 값
    (4) 배열내 자료 총개수 : 변수명.length




[ 배열 : 자주 되는 함수 ]
    1. 변수명.push( 새로운 값)          : 배열내 새로운 요소 추가
    2. 변수명.splice( 인덱스, 갯수 )    : 배열내 지정한 인덱스부터 개수 요소 삭제
    3. 변수명.indexOf( 찾을 값 )        : 배열내 '찾을값' 존재하는 인덱스 변호 변환 , 없으면 -1 변환


[ 자료형 형변환 ]
    1. 자동 타입변환
        (1) "문자열" * 1            : "문자열"              -> 숫자형 변환
        (2) "문자열" + 숫자형       : "문자열"+숫자형        -> 문자열 변환
        
    2. 수동 타입변환
        (1) Number(  )              : 문자열 -> 숫자형
        (2) parseInt(  )            : 문자열 -> 숫자형 ( 정수 )
        (3) parseFloat(  )          : 문자열 -> 숫자형 ( 실수 )
        (4) String(  )              : 그외타입 -> 문자열
        (5) Boolean(  )             : 문자열 -> 논리형


[ 연산자 ]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과 <미만 >=이상 <-=이하 ==같다 !=같지않다 , 강력비교 (===, !==)
    4. 논리연산자 : &&이면서 || 이거나 !부정
    5. 대입연산자 : =대입 , +-더한후대입 , -+ *= /= %=
    6. 증감연산자 : ++변수명 , 변수명++ , --변수명 , 변수명--
    7. 삼항연산자 : 조건 ? 참 : 거짓 , (중첩) 조건1 ? 참1 : 조건2 ? 참2 : 거짓일때

[조건문] : 특정 조건의 논리(true/false) 결과에 따라서 명령어를 처리한다.
        1. if(조건) 참일때코드 

        2. if(조건) { 참일때코드; }

        3. if(조건) { 참일때코드; }

            else{ 거짓일때코드; }

        4. if(조건1) { 참일때코드; }
            else if( 조건2 ){ 참2일때코드; }
            else if( 조건3 ){ 참3일때코드; }
            else{ 거짓일떄; }
        5. if( 조건 ){ 
                if( 조건 ){  }
                else{ }
            }
            else{ }
           
[ 프로그래밍 관점 ]
    - 프로그래밍 구성하기 위한 접근 방식
    1. 절차지향 프로그래밍 , C언어 
        (1) 함수(절차) 이용한 순서가 정해진 작업
        (2) 코드가 위에서 아래로 순차적으로 실행 , 단순하다. 

    2. 객체지향 프로그래밍 , JAVA/JS/PYTHON/C++
        (1) 객체(데이터/기능)을 *하나로 묶어서* 처리 작업 
        (2) 코드의 재사용 , 확장설 , 복잡하다.

[ 객체 ]
    1. 정의
        (1) 객체(Object)    : 주체(나/대상) 가 아닌 다른 실체(타인)
            주체(Subject)   : '나/대상' 라는 실체 , 중심
        (2) 예시1] : '김현수' 강사( 해당 클래스를 진행하는 주체 )
                    '김현수' 주체 기준으로 '유재석' 수강생 객체 ( 해당 클래스를 듣는 수강생 객체 ) 
                    '유재석' 수강생( 주체 ) <--------> '김현수' 강사 (객체)
    2. 생활속 객체란? 모두(물리적개념, 논리적개념 : 어떠한 대상을 정의[데이터/기능] 가능한 것 )
        - 공기 객체 , 안경 객체 , 컴퓨터 객체 , 강의 객체 , 사람 객체 
        ---> 개발자(주체자) 관점에서 컴퓨터속( 객체 ) 를 만든다.
[ JS 객체 ]
    1. 종류
        (1) 클래스 기반의 객체  : class(객체 만들기 위한 틀/설계도) 
        (2) 클래스 가 없는 객체 : { }
    2. 배열 과 객체 차이점 
        (1) 배열 :
            [ ]     , 인덱스  , 자료 순서 있다. , 여러개 목록
        (2) 객체 :
            { }     , 속성명  , 자료 순서 없다. , 하나의 정보
    * 주의할점 : 변수는 배열과객체 자료를 1개 저장하는 메모리 공간 
        const var1 = [ 10 , 'hello' ]                   - 자료2개를 저장하는 배열 자료 1개를 변수에 저장 
        const var2 = { props1 : 10 ,  props : 'hello' } - 자료2개를 속성으로 구분하여 객체 자료 1개를 변수에 저장 
            -> 변수 vs 자료( 자료형 : 숫자/문자열/불리언/특수/배열/객체 )
    * 예시] 제품목록
        1) const 제품목록 = [ [ '콜라' , 1000 ] , [ '사이다' , 2000]  ]
        2) const 제품목록 = { { name : '콜라' , price : 1000 } , { name : '사이다' , price : 3000 } }
        3) const 제품목록 = [ { name : '콜라' , price : 1000 } , { name : '사이다' , price : 3000 } ]
            ->  * 정보를 만들때는 객체화 하고, 동일한 정보(객체)들을 여러개 묶을때는 배열 *

    3. 사용법
        (1) 객체 선언 : 속성명 과 자료를 한쌍으로 엔트리(entry) 라고 하고 ,(쉼표) 구분하여 여러개 엔트리 {}를 감싼다.
            { 속성명 : 자료1 , 속성명 : 자료2 , }
            * 속성명(properties) : 하나의 객체에서 중복 불가능 , 특수문자를 포함한 경우는 ""or''감싼다.
            * 자료(value) : 리터럴(숫자/문자열/불리언) , 배열, 객체, 함수

        (2) 객체도 *하나*자료 로써 변수에 대입 될수 있다.
            let 변수명 = { }
            const 상수명 = { }

        (3) 객체 호출 
            - 객체전체                : 변수명
            - 객체내 특정한 속성값1   : 변수명.속성명
            - 객체내 특정한 속성값2   : 변수명['속성명']
            - 관련 함수 
                -> Object.keys( 변수명 )    : 객체내 모든 속성명(key)를 배열로 반환 
                -> Object.values( 변수명 )  : 객체내 모든 자료(value)를 배열로 반환 
                -> Object.entries( 변수명 ) : 객체내 모든 엔트리(entry)를 배열로 반환

        (4) 객체내 속성 다루기.
            - 속성 추가     : 변수명.속성명 = 자료 
            - 속성값 수정   : 변수명.속성명 = 자료 
            - 속성 삭제     : delete 변수명.속성명
            - 속성 확인     : '찾을속성명' in 변수명 , 찾을속성명이 존재하면 true/false 

        (*) 관례적으로 서로 다른 의미의 자료들은 객체로 묶어주고 동일한 의미의 자료들은 배열 묶는다.
        (*) 배열 : 인덱스로 자료를 구분 , 객체 : 속성명으로 자료를 구분 

[ 배열 과 객체 ]
    - 배열내 여러개 객체 이뤄진 형식 : [ {} , {} , {} , {} ]
        예] 학생1 = { 이름 : '유재석' , 나이 : 40 }
            학생2 = { 이름 : '강호동' , 나이 : 31 }
                -> 학생1의 이름 : console.log( 학생1.이름 )            < 변수명.속성명 >
            학생목록 = [ 학생1 , 학생2 ]
                -> 학생1의 이름 : console.log( 학생목록[0].이름 );   < 변수명[인덱스].속성명 >
    - 배열내 모든 객체 조회
        for( let index = 0 ; index <= 배열변수.length - 1 ; index++ ){
            let 객체 = 배열변수[index];
        }
        예] 특정한 배열에서 원하는 값 찾으시오. ---> for 사용
            for( let i = 0 ; i <= 학생목록.length - 1 ; i++ ){
                if( 학생목록[i].나이 >= 40 ){ }
            }
    - 변수는 특징 : { } 안에서 선언(let/const)된 변수는 { } 밖으로 나갈수 없다./ { } 안으로 들어갈수 있다. < 지역변수 >
        -> 왜? 지역변수 장점 : 특정한 범위내 에서만 사용 --> 범위 벗어나면 변수는 사라진다. --> 메모리 효율성 증대
        let A = 1;
        for( let index = 0 ; index <= 학생목록.length-1 ; index++ ){
            let B = 2;
            console.log( index ) // [O]
            console.log( B ) // [O]
            console.log( A ) // [O]
        }
        console.log( index );   // [X] for 안에서 선언된 index 변수 이므로 호출 불가능(오류) 
        console.log( B );       // [X] for 안에서 선언된 B 변수 이므로 호출 불가능(오류)
        console.log( A );       // [O]

[ 함수 ] : 이벤트/행동
    1. 정의 : 특정한 { }중괄호 안에 미리 정의된 코드/명령어
    2. 목적 : 
        (1) 코드 재사용
        (2) 매개변수에 따른 서로 다른 실행 결과
        (3) 매개변수/지역변수는 함수가 실행되면서 할당 되고 종료되면서 (자동)사라진다.
            -> 함수 *실행중* 에만 변수 사용한다.

    3. 사용법
        (1) 함수 (정의/선언) 만든다.
            function 함수명( 매개변수 , 매개변수 ···· ){ }
        (2) 함수 (사용)호출한다.
            함수명( 인자값 , 인자값 ···· );

    4. 주요 키워드
        1. 매개변수 : 함수 호출시 함수 안으로 들어오는 자료/값 저장하는 변수 , 행동x
        2. 실행문{} : 함수 호출 될때 처리되는 코드/명령어들 
        3. 반환값   : 함수 종료될때 호출한 곳으로 반환/리턴 되는 값 , 행동x , 무조건 자료 1개
    5. 선언 하는 방법 
        function 함수명( 매개변수 ){
            다양한코드들;
            return 반환값 
        }
    6. 사용/호출 하는 방법
        (1) JS파일에서 호출하는 방법
            - 함수명( 인자값 );           : 정해진 매개변수에 따라 인자값 
            - let 결과 = 함수명();       : 함수실행후 반환값을 변수에 저장 
        (2) HTML파일에서 호출하는 방법
            - <마크업 이벤트속성명="함수명()" >     : HTML에서 이벤트가 발생하면 정해진 함수가 실행

[ DOM 객체 ] : document(HTML) object(객체) model(표준) *객체는 속성(Property)과 함수(function) 포함
    1. 정의 : 문서객체표준 , HTML 마크업들을 객체처럼 다루기 
    2. 내장객체 : document
    3. 주요 속성 과 함수
        (1) document.querySelector('선택자');       :   HTML 마크업 객체 반환 함수, 반환값 : 객체1개
        (2) document.querySelectorAll('선택자');    :   HTML 마크업 객체 반환 함수, 반환값 : 배열1개(여러개)
            * 선택자(CSS동일) : 마크업명 , .클래스명 , #ID명 
        (3) (마크업객체).innerHTML                  : <마크업> **여기** </마크업> 에 HTML문자열 대입/호출
            사용불가능마크업 : <input /> , <img /> 등등 
        (4) (마크업객체).value                      : <마크업 value="**여기** /> 에 자료 대입/호출
            사용가능마크업 : <input /> , <select > , <textarea> 등등
        (5) (마크업객체).style                      : <마크업 style="**여기**" /> 에 CSS 문법 대입/호출
        (6) (마크업객체).src                        : <마크업 src="**여기"** /> 에 파일(소스) 경로 대입/호출  
            사용가능마크업 : <img /> , <audio /> 등                
        (7) (마크업객체).remove()                   : HTML 에서 지정 마크업 지우기
        (8) (마크업객체).classList                         
            (마크업객체).classList.add('클래스명')          : 지정 마크업에 클래스 추가 
            (마크업객체).classList.remove('클래스명')       : 지정 마크업에 클래스 삭제
            (마크업객체).classList.toggle('클래스명')       : 지정 마크업에 클래스 추가 혹은 (존재하면)삭제
            (마크업객체).classList.contains('클래스명')     : 지정 마크업에 클래스 존재 여부 TRUE/FALSE 반환값
        * 연산식 또는 변수호출식 길어졌을때는 중간 결과를 변수에 담아서 확인 
            예1]
                let 변수명A = document.querySelector('선택자')
                let 변수명B = 변수명A.value 
                        ========== VS =============
                let 변수명B = document.querySelector('선택자').value
            예2]
                let 변수명A = 3+2
                let 변수명B = 변수명A * 5
                    ========== VS =============
                let 변수명B = (3+2) * 5

            
            (9) (마크업객체).flies[0]                           : 지정 마크업의 업로드된 파일객체 반환 
            사용가능마크업 : <input  type="file" />
            ( + 파일객체 을 임의의 URL 주소 생성 하여 반환하는 함수 )
                - URL.createObjectURL( 파일객체 )
                - 반환값 : http://127.0.0.1:5501/d41dfb74-8cc1-475e-8659-7312e67fa6ad
                - 사용처 : 백엔드에 업로드 하기전 *미리보기 기능*

[ 날짜/시간 객체 ]
    - new Date() : 현재 시스템(PC)의 날짜와 시간 갖는 객체 반환
    
    1. let now = new Date() : 날짜/시간 객체 
    2. now.getFullYear()    : 현재 연도 반환 함수
    3. now.getMonth()       : 현재 월 반환 함수 * 1월은 0부터 시작하므로 +1
    4. now.getDay()         : 현재 요일 반환 함수 * 일요일은 0반환 , 월요일 1반환 ~~ 토요일 6반환
    5. now.getDate()        : 현재 월의 일 반환 함수
         
[ 웹 스토리지 ]
- HTML ( JS포함 ) 페이지 새로고침(재요청) 또는 최초요청 모든 JS변수는 초기화 된다.
    1. 정의 브라우저( 크롬/엣지 )내 외부저장소 , 도메인( 웹주소 ) 마다 별도 사용

    2. 종류 
        
        (1) sessionStorage      : 브라우저가 실행 동안만 저장 , 자동 삭제
        (2) localStorage        : 브라우저가 실행이 아닐 때도 저장 , 별도 저장
    3. 사용법
        
        sessionStorage객체, localStorage객체
            (1) .setItem( '속성명/key' , 값/value );                : 웹 스토리지 에 자료 저장
            (2) .getItem( '속성명/key' );                           : 웹 스토리지 의 자료 호출
            (3) .removeItem( '속성명/key' )                         : 웹 스토리지 에 특정 자료 삭제
            (4) .clear()                                           : 웹 스토리지 에 모든 자료 삭제
                * 속성명/key 는 문자열만 가능 * 리터럴만 가능[ 객체 (배열 불가능) ]

[ JSON ]
    - JavaScript Object Notation    : 자바스크립트 객체 문법 형식
        1. 정의 : 문자열 과 객체 변환 기능 제공
        2. 사용법 
            ( 1 ) JSON.Stringify( 자료 );                           : 객체 (타입)타입 ---> 문자열 타입 변환
            ( 2 ) JSON.parse( 자료 );                               : 문자열 타입 ---> 객체 (배열) 타입 변환
            
            * 브라우저(http)는 객체지향 언어가 아니다. (크롬/엣지)는 객체 모르지만 문자열은 안다.
        3. 활용처    
            ( 1 ) 웹스토리지 ( JWT )
                let 배열변수 = []
                //저장
                localStorage.( '속성명/key' , JSON.Stringify( 배열변수 ) ) ;
                //호출
                JSON.parse( localStorage.getItem( '속성명' ) ) ;
            
            ( 2 ) 비동기통신 ( 외부 페이지 , 추후 함 )