[ 자바스크립트 ]
    HTML : 하이퍼 텍스트 마크업 언어    : 웹문서 뼈대       
    CSS : 캐스케이드 스타일 시트 언어   : 웹문서 디자인 
    JS : 자바 스크립트                 : 웹문서 동적    * 프로그래밍 언어
        - HTML 안에 CSS 와 JS 가 포함
    1. 사용처 : 웹프로그래밍 , 서버개발 , 소프트웨어개발
    2. 라이브러리 종류
        1. REACT , ANGULAR , VUE , JQUERY : 프론트엔드
        2. NODE.JS : 2009년 이후 백엔드 역할 
        3. REACT NATIVE : 앱(지원중단)
        4. REACT NATIVE WEB : 웹+앱
        5. NW.JS : 소프트웨어
    3. 사용법 
        - 주의할점 : HTML 없이 JS 파일만으로 실행이 불가능하다.
        (방법1) :
            1. HTML 파일내 <body> 마크업 안에서 가장 아래
            2. <script> 마크업을 이용하여 JS코드를 작성한다. 
        *(방법2)*
            1. JS 파일 생성하여 JS코드를 작성한다.
            2. HTML 파일내 <body> 마크업 안에서 가장 아래
            3. <script src="JS파일경로"></script>
    4. 주석 
        - HTML : <!-- 주석내용 -->
        - CSS : /* 주석내용 */
        - JS :  
            1. /* 여러줄주석내용 */
            2. // 한줄주석내용 

[ JS 실행 확인 ]
    - 브라우저(크롬) 에서 F12(개발자도구)
        -> sources 탭에서 .js 파일 여부 확인 
        -> console 탭에서 .js 출력 메시지 확인 

[ 기본 필수 용어 ]
    1.데이터 ( Data / 자료 ) : 사실이나 값을 그대로 나타낸 객관적인 자료 
        -> (사람)나이,키,시력,이름 등등 / (제품)가격,제품명 등등
    
    2.리터럴 : 프로그래밍언어(JS/JAVA/PY/C) 에서 소스코드(작성한코드) 에 직접 표현한 값 
        -> 왜? 컴퓨터는 0과1(2진수) 밖에 모른다?? 각 프로그래밍언어 회사들은 0과1 로 조합한 미리 만들어진 단어 필요하다.
        -> 개발자가 사용할수 있도록 미리 정해진 값들을 넣어났다. ( 상수 = 수정할수 없는 고정값 )
        -> 프로그래밍 언어 회사에서 종류 정한다. < 자료의타입/종류(자료형) >

    3.자료형 : 프로그래밍언어서 자료들을 분류하는 방법
        -> 왜? 데이터를 처리하는데 효율적으로 하기 위해서 : <분리수거>
        -> 각 프로그래밍언어들 별로 다르다.

[ JS 자료형 ]
    1. 숫자형( Number )             : 10(정수) , 3.14(실수)
    2. 문자열( String )             : " " 큰따옴표 또는 '' 작은따옴표 감싼 자료 , 사과 vs "사과" / console  vs "console"
    3. 불리언( Boolean )            : true 또는 false *대문자 주의
    4. 배열( Array )                : [ 자료, 자료, 자료 ] 대괄호 안에 ,쉼표 구분하여 여러 자료들을 감싼 *자료*
    5. 객체( Object )               : { 속성명 : 자료 , 속성명 : 자료 } 중괄호 안에 ,쉼표 구분하여 이름과값이 한쌍을 이루는 자료
    6. 특수 : 
        undefined : 자료가 할당되지 않은 상태
        null : 자료가 존재하지 않음

* 생각해보기1 
    [ 10 , 'A' , "사과" , 3.14 ]
    1. 위 코드에서 자료는 몇개? 5개( 10 , 'A' , "사과" , 3.14 , [] )
* 생각해보기2 
    [ { 이름 : "김현수" } , 'A' , 3.14 ]
    1. 위 코드에서 자료는 몇개? 5개( "김현수" , { } , 'A' , 3.14 , [ ] )
    
** 미리 정해진 기능이 포함된 특수문자/문자열 : 키워드
    [] , {} , console , Number , String , if , for 등등 

[ 변수 와 상수 ] : 하나의 자료를 저장하는 메모리 공간 
    1. 변수 * 수정가능
        let 변수명 = 자료;
    2. 상수 * 수정불가능
        const 변수명 = 자료;
        
[ 출력함수 ]
    1. console.log( 출력할자료 또는 변수명 )        : 브라우저의 개발자도구 console탭 출력
    2. alert( 출력할자료 또는 변수명 )              : 브라우저의 알림 창 출력

[ 입력함수 ]
    1. confirm( "메시지" )                         : [확인][취소] 알림 창 , true 또는 false 반환
        let 변수명 = confirm();
    2. prompt( "메시지" )                          : 텍스트 입력 창 , 입력받은 텍스트 반환 
        let 변수명 = prompt();

[ 문자열 : 템플릿 리터럴 ] : 문자열과 변수 또는 식 연결하는 방법

 방법1) "문자열" + 변수명 + "문자열"
 *방법2* ) `문자열 ${ 변수명 } 문자열`

[ 문자열 : 이스케이프 문자 ] : \백슬래시 이용한 특수 기호 
    \\ : 백슬래시 출력 
    \' : 작은따옴표 출력 
    \" : 큰따롬표 출력 
    \n : 줄바꿈 처리 
    \t : 탭(들여쓰기) 처리 



[ 배열 ]
    1. 여러 자료들을 순서대로 저장하는 *자료*
    2. 인덱스 : 배열 내 자료들이 저장도니 순서번호 "0번부터 시작한다"
    3. 사용법 
    (1) 선언 : let/const 변수명 = [ 자료, 자료, 자료 ]
    (2) 호출 : 변수명 or 변수명[ 인덱스 ]
    (3) 수정 : 변수명 = [ 새로운 배열 ] or 변수명[인덱스] = 새로운 값
    (4) 배열내 자료 총개수 : 변수명.length




[ 배열 : 자주 되는 함수 ]
    1. 변수명.push( 새로운 값)          : 배열내 새로운 요소 추가
    2. 변수명.splice( 인덱스, 갯수 )    : 배열내 지정한 인덱스부터 개수 요소 삭제
    3. 변수명.indexOf( 찾을 값 )        : 배열내 '찾을값' 존재하는 인덱스 변호 변환 , 없으면 -1 변환


[ 자료형 형변환 ]
    1. 자동 타입변환
        (1) "문자열" * 1            : "문자열"              -> 숫자형 변환
        (2) "문자열" + 숫자형       : "문자열"+숫자형        -> 문자열 변환
        
    2. 수동 타입변환
        (1) Number(  )              : 문자열 -> 숫자형
        (2) parseInt(  )            : 문자열 -> 숫자형 ( 정수 )
        (3) parseFloat(  )          : 문자열 -> 숫자형 ( 실수 )
        (4) String(  )              : 그외타입 -> 문자열
        (5) Boolean(  )             : 문자열 -> 논리형


[ 연산자 ]
    1. 산술연산자 : +더하기 -빼기 *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결
    3. 비교연산자 : >초과 <미만 >=이상 <-=이하 ==같다 !=같지않다 , 강력비교 (===, !==)
    4. 논리연산자 : &&이면서 || 이거나 !부정
    5. 대입연산자 : =대입 , +-더한후대입 , -+ *= /= %=
    6. 증감연산자 : ++변수명 , 변수명++ , --변수명 , 변수명--
    7. 삼항연산자 : 조건 ? 참 : 거짓 , (중첩) 조건1 ? 참1 : 조건2 ? 참2 : 거짓일때

[조건문] : 특정 조건의 논리(true/false) 결과에 따라서 명령어를 처리한다.
        1. if(조건) 참일때코드 

        2. if(조건) { 참일때코드; }

        3. if(조건) { 참일때코드; }

            else{ 거짓일때코드; }

        4. if(조건1) { 참일때코드; }
            else if( 조건2 ){ 참2일때코드; }
            else if( 조건3 ){ 참3일때코드; }
            else{ 거짓일떄; }
        5. if( 조건 ){ 
                if( 조건 ){  }
                else{ }
            }
            else{ }
           
[반복문] : 특정한 조건의 논리 결과가 true 일때 명령어들을 반복 처리.
    1. for( 초기값 ; 조건문 ; 증감식 ){
            명령어(코드);
       }
    2. 실행순서 : (1)초기값 -> (2)조건문 true -> (3) 명령어 -> (4) 증감식 
                              (5)조건문 true -> (3) 명령어 -> (4) 증감식 
                              ~~~~
                              (5)조건문 false -> 반복문 종료
    * 주의할점 : 조건이 true 일때만 실행 되므로 조건식과 증감식 관계가 무조건 true 일때 무한루프
    3. 배열 과 반복문 관계 
        (1) 배열의 인덱스는 자료들을 0부터 순서대로 저장 1씩 증가된 번호 부여
        (2) 마지막 인덱스 : 변수명.length - 1 
            for( let index = 0 ; index <= 변수명.length - 1 ; index++ ){
                변수명[index];
            }
       